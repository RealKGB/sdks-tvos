// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9 (swiftlang-5.9.0.111.22 clang-1500.0.21.3)
// swift-module-flags: -target arm64-apple-tvos17.0 -enable-objc-interop -autolink-force-load -enable-library-evolution -module-link-name swiftCoreLocation -swift-version 5 -enforce-exclusivity=checked -O -library-level api -module-name CoreLocation
// swift-module-flags-ignorable: -enable-bare-slash-regex -user-module-version 28
@_exported import CoreLocation
import Foundation
import Swift
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import os.log
import os
@available(iOS 13.0, macOS 10.15, *)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
@available(xrOS, unavailable)
extension CoreLocation.CLBeaconIdentityConstraint {
  public var major: Swift.UInt16? {
    get
  }
  public var minor: Swift.UInt16? {
    get
  }
}
extension CoreLocation.CLLocationCoordinate2D : Swift._ObjectiveCBridgeable {
  public func _bridgeToObjectiveC() -> Foundation.NSValue
  public static func _forceBridgeFromObjectiveC(_ source: Foundation.NSValue, result: inout CoreLocation.CLLocationCoordinate2D?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: Foundation.NSValue, result: inout CoreLocation.CLLocationCoordinate2D?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: Foundation.NSValue?) -> CoreLocation.CLLocationCoordinate2D
  public typealias _ObjectiveCType = Foundation.NSValue
}
@available(macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0, *)
public struct CLLocationUpdate : Swift.Sendable {
  public let isStationary: Swift.Bool
  public let location: CoreLocation.CLLocation?
  public enum LiveConfiguration {
    case `default`
    case automotiveNavigation
    case otherNavigation
    case fitness
    case airborne
    public static func == (a: CoreLocation.CLLocationUpdate.LiveConfiguration, b: CoreLocation.CLLocationUpdate.LiveConfiguration) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  #if compiler(>=5.3) && $RethrowsProtocol
  public static func liveUpdates(_ configuration: CoreLocation.CLLocationUpdate.LiveConfiguration = .default) -> CoreLocation.CLLocationUpdate.Updates
  #endif
  #if compiler(>=5.3) && $RethrowsProtocol
  public struct Updates : _Concurrency.AsyncSequence, Swift.Sendable {
    public typealias Element = CoreLocation.CLLocationUpdate
    public struct Iterator : _Concurrency.AsyncIteratorProtocol {
      #if compiler(>=5.3) && $AsyncAwait
      public mutating func next() async throws -> CoreLocation.CLLocationUpdate.Updates.Element?
      #endif
      public typealias Element = CoreLocation.CLLocationUpdate.Updates.Element
    }
    public func makeAsyncIterator() -> CoreLocation.CLLocationUpdate.Updates.Iterator
    public typealias AsyncIterator = CoreLocation.CLLocationUpdate.Updates.Iterator
  }
  #endif
}
#if compiler(>=5.3) && $RethrowsProtocol
@available(*, unavailable)
extension CoreLocation.CLLocationUpdate.Updates.Iterator : Swift.Sendable {
}
#endif
@_hasMissingDesignatedInitializers @available(iOS 17.0, watchOS 10.0, *)
@available(tvOS, unavailable)
@available(macOS, unavailable)
final public class CLBackgroundActivitySession : Swift.Sendable {
  public init()
  final public func invalidate()
  @objc deinit
}
@available(macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0, *)
extension CoreLocation.CLLocationUpdate.LiveConfiguration : Swift.Equatable {}
@available(macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0, *)
extension CoreLocation.CLLocationUpdate.LiveConfiguration : Swift.Hashable {}
