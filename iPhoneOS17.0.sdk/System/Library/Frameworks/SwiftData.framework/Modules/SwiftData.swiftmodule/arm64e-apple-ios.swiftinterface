// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9 (swiftlang-5.9.0.111.22 clang-1500.0.21.3)
// swift-module-flags: -target arm64e-apple-ios17.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -library-level api -module-name SwiftData
// swift-module-flags-ignorable: -enable-experimental-feature Macros -enable-experimental-feature VariadicGenerics -enable-bare-slash-regex -user-module-version 22.3
import CoreData
import Foundation
@_exported import Observation
import Swift
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@available(swift 5.9)
@available(macOS 14, iOS 17, tvOS 17, watchOS 10, *)
public struct ModelConfiguration : Swift.Identifiable, Swift.Hashable {
  public let url: Foundation.URL
  public let name: Swift.String?
  public let sharedAppContainerIdentifier: Swift.String?
  public let cloudKitContainerIdentifier: Swift.String?
  public var schema: SwiftData.Schema?
  public let readOnly: Swift.Bool
  public let inMemory: Swift.Bool
  public init(inMemory: Swift.Bool = false)
  public init(for forType: any SwiftData.PersistentModel.Type, inMemory: Swift.Bool = false)
  public init(for forTypes: [any SwiftData.PersistentModel.Type], inMemory: Swift.Bool = false)
  public init(_ name: Swift.String? = nil, schema: SwiftData.Schema? = nil, inMemory: Swift.Bool = false, readOnly: Swift.Bool = false, sharedAppContainerIdentifier: Swift.String? = nil, cloudKitContainerIdentifier: Swift.String? = nil)
  public init(_ name: Swift.String? = nil, schema: SwiftData.Schema? = nil, url: Foundation.URL, readOnly: Swift.Bool = false, cloudKitContainerIdentifier: Swift.String? = nil)
  public var id: Foundation.URL {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (lhs: SwiftData.ModelConfiguration, rhs: SwiftData.ModelConfiguration) -> Swift.Bool
  public typealias ID = Foundation.URL
  public var hashValue: Swift.Int {
    get
  }
}
@available(macOS 14, iOS 17, tvOS 17, watchOS 10, *)
public protocol ModelActor : _Concurrency.Actor {
  nonisolated var executor: any SwiftData.ModelExecutor { get }
}
@available(macOS 14, iOS 17, tvOS 17, watchOS 10, *)
public protocol ModelExecutor : _Concurrency.SerialExecutor {
  var context: SwiftData.ModelContext { get }
}
@available(macOS 14, iOS 17, tvOS 17, watchOS 10, *)
extension SwiftData.ModelActor {
  nonisolated public var unownedExecutor: _Concurrency.UnownedSerialExecutor {
    get
  }
  public var context: SwiftData.ModelContext {
    get
  }
  public var container: SwiftData.ModelContainer {
    get
  }
}
@available(macOS 14, iOS 17, tvOS 17, watchOS 10, *)
public class DefaultModelExecutor : @unchecked Swift.Sendable, SwiftData.ModelExecutor {
  final public let context: SwiftData.ModelContext
  public init(context: SwiftData.ModelContext)
  @objc deinit
}
@available(macOS 14, iOS 17, tvOS 17, watchOS 10, *)
extension SwiftData.DefaultModelExecutor : _Concurrency.SerialExecutor {
  #if compiler(>=5.3) && $MoveOnly
  public func enqueue(_ job: __owned _Concurrency.ExecutorJob)
  #endif
  public func asUnownedSerialExecutor() -> _Concurrency.UnownedSerialExecutor
}
@available(macOS 14, iOS 17, tvOS 17, watchOS 10, *)
extension SwiftData.ModelActor {
  public subscript<T>(id: SwiftData.PersistentIdentifier, as as: T.Type) -> T? where T : SwiftData.PersistentModel {
    get
  }
}
@_hasMissingDesignatedInitializers @available(swift 5.9)
@available(macOS 14, iOS 17, tvOS 17, watchOS 10, *)
public class ModelContainer : Swift.Equatable, @unchecked Swift.Sendable {
  final public let schema: SwiftData.Schema
  public var configurations: Swift.Set<SwiftData.ModelConfiguration>
  @_Concurrency.MainActor public var mainContext: SwiftData.ModelContext {
    get
  }
  public static func == (lhs: SwiftData.ModelContainer, rhs: SwiftData.ModelContainer) -> Swift.Bool
  convenience public init(for forType: any SwiftData.PersistentModel.Type) throws
  convenience public init(for forTypes: [any SwiftData.PersistentModel.Type]) throws
  convenience public init(for forType: any SwiftData.PersistentModel.Type, _ configurations: SwiftData.ModelConfiguration...) throws
  convenience public init(for forTypes: [any SwiftData.PersistentModel.Type], _ configurations: SwiftData.ModelConfiguration...) throws
  convenience public init(for givenSchema: SwiftData.Schema, migrationPlan: (any SwiftData.SchemaMigrationPlan.Type)? = nil, _ configurations: SwiftData.ModelConfiguration...) throws
  public init(for givenSchema: SwiftData.Schema, configurations: [SwiftData.ModelConfiguration]) throws
  @objc deinit
  public func destroy()
}
@available(swift 5.9)
@available(macOS 14, iOS 17, tvOS 17, watchOS 10, *)
public struct SwiftDataError : Swift.Error, Swift.Hashable {
  public static let includePendingChangesWithBatchSize: SwiftData.SwiftDataError
  public static let unsupportedPredicate: SwiftData.SwiftDataError
  public static let unsupportedKeyPath: SwiftData.SwiftDataError
  public static let sortingPendingChangesWithIdentifiers: SwiftData.SwiftDataError
  public static let unsupportedSortDescriptor: SwiftData.SwiftDataError
  public static let duplicateConfiguration: SwiftData.SwiftDataError
  public static let configurationFileNameTooLong: SwiftData.SwiftDataError
  public static let configurationFileNameContainsInvalidCharacters: SwiftData.SwiftDataError
  public static let configurationSchemaNotFoundInContainerSchema: SwiftData.SwiftDataError
  public static let loadIssueModelContainer: SwiftData.SwiftDataError
  public static let objectValidationFailure: SwiftData.SwiftDataError
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: SwiftData.SwiftDataError, b: SwiftData.SwiftDataError) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
@available(swift 5.9)
@available(macOS 14, iOS 17, tvOS 17, watchOS 10, *)
public class ModelContext : Swift.Equatable {
  public var _nsContext: CoreData.NSManagedObjectContext
  public var undoManager: Foundation.UndoManager? {
    get
    set
  }
  public var insertedObjectsArray: [any SwiftData.PersistentModel] {
    get
  }
  public var changedObjectsArray: [any SwiftData.PersistentModel] {
    get
  }
  public var deletedObjectsArray: [any SwiftData.PersistentModel] {
    get
  }
  public var container: SwiftData.ModelContainer {
    get
  }
  public var autosaveEnabled: Swift.Bool {
    get
    set
  }
  public init(_ container: SwiftData.ModelContainer)
  public static func == (lhs: SwiftData.ModelContext, rhs: SwiftData.ModelContext) -> Swift.Bool
  public var hasChanges: Swift.Bool {
    get
  }
  public func register(object: some PersistentObject)
  public func object(with objectID: SwiftData.PersistentIdentifier) -> any SwiftData.PersistentModel
  public func registeredObject<T>(for objectID: SwiftData.PersistentIdentifier) -> T? where T : SwiftData.PersistentModel
  public func insert<T>(_ model: T) where T : SwiftData.PersistentModel
  public func insert<T>(object: T) where T : SwiftData.PersistentModel
  public func willChange(object: some PersistentObject)
  public func rollback()
  public func undo()
  public func redo()
  public func processPendingChanges()
  @discardableResult
  public func _processRecentChanges(validate: Swift.Bool) throws -> Swift.Bool
  public func insert(_ batch: [[Swift.String : Any]], model: any SwiftData.PersistentModel.Type) throws -> Swift.Bool
  public func update(expressions: [Swift.String : Foundation.NSExpression], model: any SwiftData.PersistentModel.Type, where predicate: Foundation.NSPredicate? = nil) throws -> Swift.Bool
  public func delete(model: any SwiftData.PersistentModel.Type, where predicate: Foundation.NSPredicate? = nil, includeSubentities: Swift.Bool = true) throws -> Swift.Bool
  public func delete<T>(_ object: T) where T : SwiftData.PersistentModel
  public func delete<T>(object: T) where T : SwiftData.PersistentModel
  public func transaction(block: () throws -> Swift.Void) throws
  public func save() throws
  public func enumerate<T>(_ fetch: SwiftData.FetchDescriptor<T>, batchSize: Swift.Int = 5000, allowEscapingMutations: Swift.Bool? = false, block: (_ object: T) throws -> Swift.Void) throws where T : SwiftData.PersistentModel
  public func fetch<T>(_ descriptor: SwiftData.FetchDescriptor<T>) throws -> [T] where T : SwiftData.PersistentModel
  public func fetch<T>(_ descriptor: SwiftData.FetchDescriptor<T>, batchSize: Swift.Int) throws -> SwiftData.FetchResultsCollection<T> where T : SwiftData.PersistentModel
  public func fetchIdentifiers<T>(_ descriptor: SwiftData.FetchDescriptor<T>) throws -> [SwiftData.PersistentIdentifier] where T : SwiftData.PersistentModel
  public func fetchIdentifiers<T>(_ descriptor: SwiftData.FetchDescriptor<T>, batchSize: Swift.Int) throws -> SwiftData.FetchResultsCollection<SwiftData.PersistentIdentifier> where T : SwiftData.PersistentModel
  public static let willSave: Foundation.Notification.Name
  public static let didSave: Foundation.Notification.Name
  public enum NotificationKey : Swift.String {
    case queryGeneration
    case invalidatedAllIdentifiers
    case insertedIdentifiers
    case updatedIdentifiers
    case deletedIdentifiers
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  @objc deinit
}
@available(*, unavailable, message: "contexts cannot be shared across concurrency contexts")
extension SwiftData.ModelContext : @unchecked Swift.Sendable {
}
#if compiler(>=5.3) && $Macros && $AttachedMacros
@available(swift 5.9)
@available(macOS 14, iOS 17, tvOS 17, watchOS 10, *)
@attached(member, names: named(backingData), named(schemaMetadata), named(`init`), named(_$observationRegistrar)) @attached(memberAttribute) @attached(conformance) public macro Model() -> () = #externalMacro(module: "SwiftDataMacros", type: "PersistentModelMacro")
#endif
#if compiler(>=5.3) && $Macros && $AttachedMacros
@available(swift 5.9)
@available(macOS 14, iOS 17, tvOS 17, watchOS 10, *)
@attached(member) public macro Attribute(_ options: SwiftData.PropertyOptions..., renamingIdentifier: Swift.String? = nil, hashModifier: Swift.String? = nil) -> () = #externalMacro(module: "SwiftDataMacros", type: "AttributePropertyMacro")
#endif
#if compiler(>=5.3) && $Macros && $AttachedMacros
@available(swift 5.9)
@available(macOS 14, iOS 17, tvOS 17, watchOS 10, *)
@attached(member) public macro Relationship(_ deleteRule: SwiftData.RelationshipDeleteRule = .nullify, _ options: SwiftData.PropertyOptions..., renamingIdentifier: Swift.String? = nil, inverse: Swift.AnyKeyPath? = nil, hashModifier: Swift.String? = nil) -> () = #externalMacro(module: "SwiftDataMacros", type: "RelationshipPropertyMacro")
#endif
#if compiler(>=5.3) && $Macros && $AttachedMacros
@available(swift 5.9)
@available(macOS 14, iOS 17, tvOS 17, watchOS 10, *)
@attached(member) public macro Transient() -> () = #externalMacro(module: "SwiftDataMacros", type: "TransientPropertyMacro")
#endif
#if compiler(>=5.3) && $Macros && $AttachedMacros
@available(swift 5.9)
@available(macOS 14, iOS 17, tvOS 17, watchOS 10, *)
@attached(accessor) public macro PersistedProperty() -> () = #externalMacro(module: "SwiftDataMacros", type: "PersistedPropertyMacro")
#endif
@available(swift 5.9)
@available(macOS 14, iOS 17, tvOS 17, watchOS 10, *)
public typealias PersistentObject = SwiftData.PersistentModel
@available(swift 5.9)
@available(macOS 14, iOS 17, tvOS 17, watchOS 10, *)
public protocol PersistentModel : AnyObject, Observation.Observable, Swift.Hashable, Swift.Identifiable {
  init(backingData: any SwiftData.BackingData<Self>, fromFetch: Swift.Bool)
  var backingData: any SwiftData.BackingData<Self> { get set }
  static func schemaMetadata() -> [(Swift.String, Swift.AnyKeyPath, Any?, Any?)]
}
@available(swift 5.9)
@available(macOS 14, iOS 17, tvOS 17, watchOS 10, *)
extension SwiftData.PersistentModel {
  public func getValue<Value>(for key: Swift.KeyPath<Self, Value>) -> Value where Value : Swift.Decodable
  public func getValue<Value>(for key: Swift.KeyPath<Self, Value>) -> Value where Value : SwiftData.PersistentModel
  public func getValue<Value>(for key: Swift.KeyPath<Self, Value?>) -> Value? where Value : SwiftData.PersistentModel
  public func getValue<Value, OtherModel>(for key: Swift.KeyPath<Self, Value>) -> Value where Value : Swift.Sequence, OtherModel : SwiftData.PersistentModel, OtherModel == Value.Element
  public func setValue<Value>(for key: Swift.KeyPath<Self, Value>, to newValue: Value) where Value : Swift.Encodable
  public func setValue<Value>(for key: Swift.KeyPath<Self, Value>, to newValue: Value) where Value : SwiftData.PersistentModel
  public func setValue<Value>(for key: Swift.KeyPath<Self, Value?>, to newValue: Value?) where Value : SwiftData.PersistentModel
  public func setValue<Value, OtherModel>(for key: Swift.KeyPath<Self, Value>, to newValue: Value) where Value : Swift.Sequence, OtherModel : SwiftData.PersistentModel, OtherModel == Value.Element
  public func handleRelationship<Value>(for key: Swift.KeyPath<Self, Value>, to newValue: Value) where Value : SwiftData.PersistentModel
  public func handleRelationship<Value>(for key: Swift.KeyPath<Self, Value?>, to newValue: Value?) where Value : SwiftData.PersistentModel
  public func handleRelationship<Value, OtherModel>(for key: Swift.KeyPath<Self, Value>, to newValue: Value) where Value : Swift.Sequence, OtherModel : SwiftData.PersistentModel, OtherModel == Value.Element
  public var context: SwiftData.ModelContext? {
    get
  }
  public var objectID: SwiftData.PersistentIdentifier {
    get
  }
  public static func == (lhs: Self, rhs: Self) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var id: SwiftData.PersistentIdentifier {
    get
  }
  public func hasChanges() -> Swift.Bool
  public func isDeleted() -> Swift.Bool
}
@available(swift 5.9)
@available(macOS 14, iOS 17, tvOS 17, watchOS 10, *)
public enum MigrationStage {
  case lightweight(fromVersion: any SwiftData.VersionedSchema.Type, toVersion: any SwiftData.VersionedSchema.Type)
  case custom(fromVersion: any SwiftData.VersionedSchema.Type, toVersion: any SwiftData.VersionedSchema.Type, willMigrate: ((_ context: SwiftData.ModelContext) throws -> Swift.Void)?, didMigrate: ((_ context: SwiftData.ModelContext) throws -> Swift.Void)?)
}
@available(swift 5.9)
@available(macOS 14, iOS 17, tvOS 17, watchOS 10, *)
public protocol VersionedSchema {
  static var models: [any SwiftData.PersistentModel.Type] { get }
  static var versionIdentifier: Swift.String? { get }
}
@available(swift 5.9)
@available(macOS 14, iOS 17, tvOS 17, watchOS 10, *)
public protocol SchemaMigrationPlan {
  static var schemas: [any SwiftData.VersionedSchema.Type] { get }
  static var stages: [SwiftData.MigrationStage] { get }
}
@available(swift 5.9)
@available(macOS 14, iOS 17, tvOS 17, watchOS 10, *)
final public class Schema : Swift.Codable, Swift.Hashable {
  public static let schemaEncodingVersion: Swift.Double
  final public let encodingVersion: Swift.Double
  final public let entities: [SwiftData.Entity]
  final public let entitiesByName: [Swift.String : SwiftData.Entity]
  public init()
  public init(_ entities: SwiftData.Entity...)
  public init(_ types: [any SwiftData.PersistentModel.Type])
  convenience public init(versionedSchema: any SwiftData.VersionedSchema.Type)
  public init(from decoder: any Swift.Decoder) throws
  final public func encode(to encoder: any Swift.Encoder) throws
  public static func == (lhs: SwiftData.Schema, rhs: SwiftData.Schema) -> Swift.Bool
  final public func hash(into hasher: inout Swift.Hasher)
  final public func save(to toURL: Foundation.URL) throws -> Swift.Bool
  public static func load(from fromURL: Foundation.URL) throws -> SwiftData.Schema
  @objc deinit
  final public var hashValue: Swift.Int {
    get
  }
}
@available(swift 5.9)
@available(macOS 14, iOS 17, tvOS 17, watchOS 10, *)
extension SwiftData.Schema : Swift.CustomDebugStringConvertible {
  final public var debugDescription: Swift.String {
    get
  }
}
@available(swift 5.9)
@available(macOS 14, iOS 17, tvOS 17, watchOS 10, *)
public struct FetchDescriptor<T> where T : SwiftData.PersistentModel {
  public var predicate: Foundation.Predicate<T>?
  public var sortBy: [Foundation.SortDescriptor<T>]
  public var fetchLimit: Swift.Int?
  public var fetchOffset: Swift.Int?
  public var includePendingChanges: Swift.Bool
  public var propertiesToFetch: [Swift.PartialKeyPath<T>]
  public var relationshipKeyPathsForPrefetching: [Swift.PartialKeyPath<T>]
  public init(predicate: Foundation.Predicate<T>? = nil, sortBy: [Foundation.SortDescriptor<T>] = [])
}
@available(swift 5.9)
@available(macOS 14, iOS 17, tvOS 17, watchOS 10, *)
extension SwiftData.Schema {
  final public func makeManagedObjectModel() -> CoreData.NSManagedObjectModel?
  final public func managedObjectModel(mergedWith managedObjectModel: CoreData.NSManagedObjectModel) -> CoreData.NSManagedObjectModel?
  public static func makeManagedObjectModel(_ entityTypes: [any SwiftData.PersistentModel.Type]) -> CoreData.NSManagedObjectModel?
  public static func managedObjectModel(for entityTypes: [any SwiftData.PersistentModel.Type], mergedWith managedObjectModel: CoreData.NSManagedObjectModel) -> CoreData.NSManagedObjectModel?
}
@available(swift 5.9)
@available(macOS 14, iOS 17, tvOS 17, watchOS 10, *)
final public class Entity : Swift.Codable, Swift.Hashable {
  final public var name: Swift.String
  final public var subentities: Swift.Set<SwiftData.Entity>
  final public var superEntityName: Swift.String?
  final public var superentity: SwiftData.Entity? {
    get
    set
  }
  final public var storedProperties: [any SwiftData.SchemaProperty] {
    get
    set
  }
  final public var inheritedProperties: [any SwiftData.SchemaProperty] {
    get
    set
  }
  final public var properties: [any SwiftData.SchemaProperty] {
    get
  }
  final public var attributes: Swift.Set<SwiftData.Attribute>
  final public var relationships: Swift.Set<SwiftData.Relationship>
  final public var attributesByName: [Swift.String : SwiftData.Attribute]
  final public var relationshipsByName: [Swift.String : SwiftData.Relationship]
  final public var storedPropertiesByName: [Swift.String : any SwiftData.SchemaProperty]
  final public var inheritedPropertiesByName: [Swift.String : any SwiftData.SchemaProperty]
  final public var mangledName: Swift.String?
  final public var uniquenessConstraints: [[Swift.String]]
  public init(_ name: Swift.String)
  public init(_ name: Swift.String, subentities: SwiftData.Entity..., properties: any SwiftData.SchemaProperty...)
  public init(_ name: Swift.String, properties: any SwiftData.SchemaProperty...)
  public init(from decoder: any Swift.Decoder) throws
  final public func encode(to encoder: any Swift.Encoder) throws
  public static func == (lhs: SwiftData.Entity, rhs: SwiftData.Entity) -> Swift.Bool
  final public func hash(into hasher: inout Swift.Hasher)
  @objc deinit
  final public var hashValue: Swift.Int {
    get
  }
}
@available(swift 5.9)
@available(macOS 14, iOS 17, tvOS 17, watchOS 10, *)
extension SwiftData.Entity : Swift.CustomDebugStringConvertible {
  final public var debugDescription: Swift.String {
    get
  }
}
@available(swift 5.9)
@available(macOS 14, iOS 17, tvOS 17, watchOS 10, *)
public protocol Property {
  var name: Swift.String { get set }
  var renamingIdentifier: Swift.String { get set }
  var options: SwiftData.PropertyOptions { get set }
  var valueType: any Any.Type { get set }
  func isProperty() -> Swift.Bool
  func isAttribute() -> Swift.Bool
  func isRelationship() -> Swift.Bool
  func isToOneRelationship() -> Swift.Bool
  func isUnique() -> Swift.Bool
  func isOptional() -> Swift.Bool
  func isTransient() -> Swift.Bool
}
@available(swift 5.9)
@available(macOS 14, iOS 17, tvOS 17, watchOS 10, *)
extension SwiftData.Property {
  public func isProperty() -> Swift.Bool
  public func isAttribute() -> Swift.Bool
  public func isRelationship() -> Swift.Bool
  public func isToOneRelationship() -> Swift.Bool
  public func isUnique() -> Swift.Bool
  public func isOptional() -> Swift.Bool
  public func isTransient() -> Swift.Bool
  public static func isOptionalType(_ givenType: any Any.Type) -> Swift.Bool
}
@available(swift 5.9)
@available(macOS 14, iOS 17, tvOS 17, watchOS 10, *)
public class PropertyOptions : Swift.OptionSet, Swift.Codable, Swift.Hashable {
  final public let rawValue: Swift.UInt
  required public init(rawValue: Swift.UInt)
  public static let unique: SwiftData.PropertyOptions
  public static let transient: SwiftData.PropertyOptions
  public static let transformable: SwiftData.PropertyOptions
  public static let externalStorage: SwiftData.PropertyOptions
  public typealias ArrayLiteralElement = SwiftData.PropertyOptions
  public typealias Element = SwiftData.PropertyOptions
  public typealias RawValue = Swift.UInt
  @objc deinit
}
@available(swift 5.9)
@available(macOS 14, iOS 17, tvOS 17, watchOS 10, *)
extension SwiftData.PropertyOptions : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
@available(swift 5.9)
@available(macOS 14, iOS 17, tvOS 17, watchOS 10, *)
extension SwiftData.PropertyOptions {
  public static let encrypt: SwiftData.PropertyOptions
  public static let preserveValueOnDeletion: SwiftData.PropertyOptions
  public static let spotlight: SwiftData.PropertyOptions
}
@available(swift 5.9)
@available(macOS 14, iOS 17, tvOS 17, watchOS 10, *)
public protocol SchemaProperty : Swift.Decodable, Swift.Encodable, Swift.Hashable, SwiftData.Property {
}
@available(swift 5.9)
@available(macOS 14, iOS 17, tvOS 17, watchOS 10, *)
public protocol SchemaBaseAttributeProperty : SwiftData.SchemaProperty {
}
@available(swift 5.9)
@available(macOS 14, iOS 17, tvOS 17, watchOS 10, *)
public class Attribute : SwiftData.SchemaBaseAttributeProperty, Swift.CustomDebugStringConvertible {
  public static func == (lhs: SwiftData.Attribute, rhs: SwiftData.Attribute) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var name: Swift.String
  public var renamingIdentifier: Swift.String
  public var options: SwiftData.PropertyOptions
  public var valueType: any Any.Type
  public var value: Any?
  public var defaultValue: Any?
  public var hashModifier: Swift.String?
  public var nested: Swift.Bool
  public init(_ options: SwiftData.PropertyOptions..., renamingIdentifier: Swift.String? = nil, hashModifier: Swift.String? = nil)
  public init(name: Swift.String, renamingIdentifier: Swift.String? = nil, options: SwiftData.PropertyOptions, valueType: any Any.Type, value: Any? = nil, defaultValue: Any? = nil, hashModifier: Swift.String? = nil, nested: Swift.Bool = false)
  required public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  public func isAttribute() -> Swift.Bool
  public func isTransformable() -> Swift.Bool
  public var debugDescription: Swift.String {
    get
  }
  @objc deinit
  public var hashValue: Swift.Int {
    get
  }
}
@available(swift 5.9)
@available(macOS 14, iOS 17, tvOS 17, watchOS 10, *)
final public class CompositeAttribute : SwiftData.Attribute {
  final public var properties: [SwiftData.Attribute]
  override public init(name: Swift.String, renamingIdentifier: Swift.String? = nil, options: SwiftData.PropertyOptions, valueType: any Any.Type, value: Any? = nil, defaultValue: Any? = nil, hashModifier: Swift.String? = nil, nested: Swift.Bool = false)
  required public init(from decoder: any Swift.Decoder) throws
  override final public func encode(to encoder: any Swift.Encoder) throws
  override final public var debugDescription: Swift.String {
    get
  }
  @objc deinit
}
@available(swift 5.9)
@available(macOS 14, iOS 17, tvOS 17, watchOS 10, *)
public protocol _Schema {
  func generateSchemaProperty() -> any SwiftData.SchemaProperty
}
@available(swift 5.9)
@available(macOS 14, iOS 17, tvOS 17, watchOS 10, *)
public enum RelationshipDeleteRule : Swift.String, Swift.Codable {
  case noAction
  case nullify
  case cascade
  case deny
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@_hasMissingDesignatedInitializers @available(swift 5.9)
@available(macOS 14, iOS 17, tvOS 17, watchOS 10, *)
final public class Relationship : SwiftData.SchemaProperty {
  public static func == (lhs: SwiftData.Relationship, rhs: SwiftData.Relationship) -> Swift.Bool
  final public func hash(into hasher: inout Swift.Hasher)
  final public var name: Swift.String
  final public var renamingIdentifier: Swift.String
  final public var keypath: Swift.AnyKeyPath?
  final public var options: SwiftData.PropertyOptions
  final public var valueType: any Any.Type
  final public var destination: Swift.String
  final public var deleteRule: SwiftData.RelationshipDeleteRule
  final public var inverseName: Swift.String?
  final public var inverseKeyPath: Swift.AnyKeyPath?
  final public var min: Swift.Int?
  final public var max: Swift.Int?
  final public var hashModifier: Swift.String?
  final public func isToOneRelationship() -> Swift.Bool
  public init(_ deleteRule: SwiftData.RelationshipDeleteRule = .nullify, _ options: SwiftData.PropertyOptions..., min: Swift.Int? = 0, max: Swift.Int? = 0, renamingIdentifier: Swift.String? = nil, inverse: Swift.AnyKeyPath? = nil, hashModifier: Swift.String? = nil)
  public init(from decoder: any Swift.Decoder) throws
  final public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
  final public var hashValue: Swift.Int {
    get
  }
}
@available(swift 5.9)
@available(macOS 14, iOS 17, tvOS 17, watchOS 10, *)
extension SwiftData.Relationship : Swift.CustomDebugStringConvertible {
  final public var debugDescription: Swift.String {
    get
  }
}
@available(macOS 13, iOS 16, tvOS 16, watchOS 9, *)
public struct PersistentIdentifier : Swift.Hashable, Swift.Identifiable, Swift.Equatable, Swift.Comparable, Swift.Codable, Swift.Sendable {
  public let id: SwiftData.PersistentIdentifier.ID
  public var entityName: Swift.String {
    get
  }
  public var storeIdentifier: Swift.String? {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
  public static func == (lhs: SwiftData.PersistentIdentifier, rhs: SwiftData.PersistentIdentifier) -> Swift.Bool
  public static func < (lhs: SwiftData.PersistentIdentifier, rhs: SwiftData.PersistentIdentifier) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public func encode(to encoder: any Swift.Encoder) throws
  public struct ID : Swift.Hashable, Swift.Equatable, Swift.Sendable {
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (lhs: SwiftData.PersistentIdentifier.ID, rhs: SwiftData.PersistentIdentifier.ID) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public var hashValue: Swift.Int {
    get
  }
}
#if compiler(>=5.3) && $PrimaryAssociatedTypes2
@available(swift 5.9)
@available(macOS 14, iOS 17, tvOS 17, watchOS 10, *)
public protocol BackingData<Model> {
  associatedtype Model : SwiftData.PersistentModel
  associatedtype StoredAttribute
  associatedtype ToManyArray
  init(for modelType: Self.Model.Type)
  init(for modelInstance: Self.Model)
  var objectID: SwiftData.PersistentIdentifier? { get set }
  func getValue<Value>(for key: Swift.KeyPath<Self.Model, Value>) -> Value where Value : Swift.Decodable
  func getValue<Value>(for key: Swift.KeyPath<Self.Model, Value>) -> Value where Value : SwiftData.PersistentModel
  func getValue<Value>(for key: Swift.KeyPath<Self.Model, Value?>) -> Value? where Value : SwiftData.PersistentModel
  func getValue<Value, OtherModel>(for key: Swift.KeyPath<Self.Model, Value>) -> Value where Value : Swift.Sequence, OtherModel : SwiftData.PersistentModel, OtherModel == Value.Element
  func setValue<Value>(for key: Swift.KeyPath<Self.Model, Value>, to newValue: Value) where Value : Swift.Encodable
  func setValue<Value>(for key: Swift.KeyPath<Self.Model, Value>, to newValue: Value) where Value : SwiftData.PersistentModel
  func setValue<Value>(for key: Swift.KeyPath<Self.Model, Value?>, to newValue: Value?) where Value : SwiftData.PersistentModel
  func setValue<Value, OtherModel>(for key: Swift.KeyPath<Self.Model, Value>, to newValue: Value) where Value : Swift.Sequence, OtherModel : SwiftData.PersistentModel, OtherModel == Value.Element
  func setValue(_ newValue: Any?, forKeyString: Swift.String)
}
#else
@available(swift 5.9)
@available(macOS 14, iOS 17, tvOS 17, watchOS 10, *)
public protocol BackingData {
  associatedtype Model : SwiftData.PersistentModel
  associatedtype StoredAttribute
  associatedtype ToManyArray
  init(for modelType: Self.Model.Type)
  init(for modelInstance: Self.Model)
  var objectID: SwiftData.PersistentIdentifier? { get set }
  func getValue<Value>(for key: Swift.KeyPath<Self.Model, Value>) -> Value where Value : Swift.Decodable
  func getValue<Value>(for key: Swift.KeyPath<Self.Model, Value>) -> Value where Value : SwiftData.PersistentModel
  func getValue<Value>(for key: Swift.KeyPath<Self.Model, Value?>) -> Value? where Value : SwiftData.PersistentModel
  func getValue<Value, OtherModel>(for key: Swift.KeyPath<Self.Model, Value>) -> Value where Value : Swift.Sequence, OtherModel : SwiftData.PersistentModel, OtherModel == Value.Element
  func setValue<Value>(for key: Swift.KeyPath<Self.Model, Value>, to newValue: Value) where Value : Swift.Encodable
  func setValue<Value>(for key: Swift.KeyPath<Self.Model, Value>, to newValue: Value) where Value : SwiftData.PersistentModel
  func setValue<Value>(for key: Swift.KeyPath<Self.Model, Value?>, to newValue: Value?) where Value : SwiftData.PersistentModel
  func setValue<Value, OtherModel>(for key: Swift.KeyPath<Self.Model, Value>, to newValue: Value) where Value : Swift.Sequence, OtherModel : SwiftData.PersistentModel, OtherModel == Value.Element
  func setValue(_ newValue: Any?, forKeyString: Swift.String)
}
#endif
@available(swift 5.9)
@available(macOS 14, iOS 17, tvOS 17, watchOS 10, *)
final public class CoreDataBackingData<Model> : SwiftData.BackingData where Model : SwiftData.PersistentModel {
  public typealias StoredAttribute = Swift.Codable
  public typealias ToManyArray = [any SwiftData.PersistentModel]
  final public var objectID: SwiftData.PersistentIdentifier?
  public init(for modelType: Model.Type)
  public init(for modelInstance: Model)
  public init(for: Model.Type, with managedObject: CoreData.NSManagedObject)
  final public func getValue<Value>(for key: Swift.KeyPath<Model, Value>) -> Value where Value : Swift.Decodable
  final public func getValue<Value>(for key: Swift.KeyPath<Model, Value>) -> Value where Value : SwiftData.PersistentModel
  final public func getValue<Value>(for key: Swift.KeyPath<Model, Value?>) -> Value? where Value : SwiftData.PersistentModel
  final public func getValue<Value>(for key: Swift.KeyPath<Model, Value>) -> Value where Value : Swift.Decodable, Value : Swift.Encodable
  final public func getValue<Value, OtherModel>(for key: Swift.KeyPath<Model, Value>) -> Value where Value : Swift.Sequence, OtherModel : SwiftData.PersistentModel, OtherModel == Value.Element
  final public func getValue<Value>(for key: Swift.String) -> Value
  final public func setValue<Value>(for key: Swift.KeyPath<Model, Value>, to newValue: Value) where Value : Swift.Encodable
  final public func setValue<Value>(for key: Swift.KeyPath<Model, Value?>, to newValue: Value?) where Value : SwiftData.PersistentModel
  final public func setValue<Value>(for key: Swift.KeyPath<Model, Value>, to newValue: Value) where Value : SwiftData.PersistentModel
  final public func setValue<Value, OtherModel>(for key: Swift.KeyPath<Model, Value>, to newValue: Value) where Value : Swift.Sequence, OtherModel : SwiftData.PersistentModel, OtherModel == Value.Element
  final public func setValue<Value>(for key: Swift.String, to newValue: Value)
  final public func setValue<Value, OtherModel>(for key: Swift.String, to newValue: Value) where Value : Swift.Sequence, OtherModel : SwiftData.PersistentModel, OtherModel == Value.Element
  final public func getValue<T>(forKeyString: Swift.String, asType: T.Type) -> T?
  final public func setValue(_ newValue: Any?, forKeyString: Swift.String)
  @objc deinit
}
@available(swift 5.9)
@available(macOS 14, iOS 17, tvOS 17, watchOS 10, *)
extension Swift.Optional : Swift.Sequence where Wrapped : Swift.Sequence, Wrapped.Element : SwiftData.PersistentModel {
  public func makeIterator() -> Wrapped.Iterator
  public typealias Element = Wrapped.Element
  public typealias Iterator = Wrapped.Iterator
}
@available(swift 5.9)
@available(macOS 14, iOS 17, tvOS 17, watchOS 10, *)
public struct FetchResultsCollection<Element> : Swift.RandomAccessCollection {
  public var startIndex: Swift.Int {
    get
  }
  public var endIndex: Swift.Int {
    get
  }
  public subscript(position: Swift.Int) -> Element {
    get
  }
  public typealias Index = Swift.Int
  public typealias Indices = Swift.Range<Swift.Int>
  public typealias Iterator = Swift.IndexingIterator<SwiftData.FetchResultsCollection<Element>>
  public typealias SubSequence = Swift.Slice<SwiftData.FetchResultsCollection<Element>>
}
@available(swift 5.9)
@available(macOS 14, iOS 17, tvOS 17, watchOS 10, *)
extension SwiftData.ModelContext.NotificationKey : Swift.Equatable {}
@available(swift 5.9)
@available(macOS 14, iOS 17, tvOS 17, watchOS 10, *)
extension SwiftData.ModelContext.NotificationKey : Swift.Hashable {}
@available(swift 5.9)
@available(macOS 14, iOS 17, tvOS 17, watchOS 10, *)
extension SwiftData.ModelContext.NotificationKey : Swift.RawRepresentable {}
@available(swift 5.9)
@available(macOS 14, iOS 17, tvOS 17, watchOS 10, *)
extension SwiftData.RelationshipDeleteRule : Swift.Equatable {}
@available(swift 5.9)
@available(macOS 14, iOS 17, tvOS 17, watchOS 10, *)
extension SwiftData.RelationshipDeleteRule : Swift.Hashable {}
@available(swift 5.9)
@available(macOS 14, iOS 17, tvOS 17, watchOS 10, *)
extension SwiftData.RelationshipDeleteRule : Swift.RawRepresentable {}
