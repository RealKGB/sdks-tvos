// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9 (swiftlang-5.9.0.111.24 clang-1500.0.21.3)
// swift-module-flags: -target arm64e-apple-macosx14.0 -enable-objc-interop -enable-library-evolution -module-link-name swiftObservation -swift-version 5 -O -library-level api -enforce-exclusivity=unchecked -module-name Observation
// swift-module-flags-ignorable: -enable-lexical-lifetimes=false -target-min-inlining-version min -enable-experimental-feature Macros -user-module-version 5.9.0.111.24
import Swift
@available(macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0, *)
@_marker public protocol Observable {
}
#if compiler(>=5.3) && $Macros && $AttachedMacros
@available(macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0, *)
@attached(member, names: named(_$observationRegistrar), named(access), named(withMutation), arbitrary) @attached(memberAttribute) @attached(conformance) public macro Observable() -> () = #externalMacro(module: "ObservationMacros", type: "ObservableMacro")
#endif
#if compiler(>=5.3) && $Macros && $AttachedMacros
@available(macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0, *)
@attached(accessor) public macro ObservationTracked() -> () = #externalMacro(module: "ObservationMacros", type: "ObservationTrackedMacro")
#endif
#if compiler(>=5.3) && $Macros && $AttachedMacros
@available(macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0, *)
@attached(accessor) public macro ObservationIgnored() -> () = #externalMacro(module: "ObservationMacros", type: "ObservationIgnoredMacro")
#endif
@available(macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0, *)
public struct ObservationRegistrar : Swift.Sendable {
  public init()
  public func access<Subject, Member>(_ subject: Subject, keyPath: Swift.KeyPath<Subject, Member>) where Subject : Observation.Observable
  public func willSet<Subject, Member>(_ subject: Subject, keyPath: Swift.KeyPath<Subject, Member>) where Subject : Observation.Observable
  public func didSet<Subject, Member>(_ subject: Subject, keyPath: Swift.KeyPath<Subject, Member>) where Subject : Observation.Observable
  public func withMutation<Subject, Member, T>(of subject: Subject, keyPath: Swift.KeyPath<Subject, Member>, _ mutation: () throws -> T) rethrows -> T where Subject : Observation.Observable
}
#if compiler(>=5.3) && $Sendable
@available(macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0, *)
public func withObservationTracking<T>(_ apply: () -> T, onChange: @autoclosure () -> @Sendable () -> Swift.Void) -> T
#endif
